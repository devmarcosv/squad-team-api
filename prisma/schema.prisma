// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int          @id @default(autoincrement())
  email              String       @unique
  password           String
  role               String       @default("USER") // "USER" ou "ADMIN"
  summonerName       String? // Nome do invocador no League of Legends
  championMostPlayed String? // Campeão mais jogado
  preferredLane      String? // Lane preferida (ex.: TOP, MID, ADC, SUP, JUNGLE)
  friendsAsUser      Friend[]     @relation("friendsAsUser") // Relação onde o User é o "user"
  friendsAsFriend    Friend[]     @relation("friendsAsFriend") // Relação onde o User é o "friend"
  teamMembers        TeamMember[] // Relação com TeamMember
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
}

model Friend {
  id        Int      @id @default(autoincrement())
  userId    Int
  friendId  Int
  status    String   @default("PENDING") // "PENDING", "ACCEPTED", "REJECTED"
  user      User     @relation("friendsAsUser", fields: [userId], references: [id])
  friend    User     @relation("friendsAsFriend", fields: [friendId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Team {
  id          Int          @id @default(autoincrement())
  name        String
  description String?
  members     TeamMember[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model TeamMember {
  id        Int      @id @default(autoincrement())
  userId    Int
  teamId    Int
  role      String   @default("MEMBER") // "MEMBER", "CAPTAIN"
  user      User     @relation(fields: [userId], references: [id])
  team      Team     @relation(fields: [teamId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  email     String   @unique // Garanta que seja único para usar no upsert
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Messages {
  id         String   @id @default(autoincrement())
  senderId   Int
  receiverId Int
  content    String 
  sent_at    DateTime
  sender     User     @relation(fields: [senderId], references: [id])
  receiver   User     @relation(fields: [senderId], references: [id])

}
